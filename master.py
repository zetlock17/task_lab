from types import NoneType
import telebot, json
from telebot import types
import db
import os
from dotenv import load_dotenv

load_dotenv()

token = os.environ.get('TELEGRAM_BOT_TOKEN')

if not token:
    print("Error: TELEGRAM_BOT_TOKEN not found in .env file")
    exit(1)

bot = telebot.TeleBot(token, parse_mode="HTML")


def isFirstMessage(message):
    return not db.is_user_registered(str(message.from_user.id))


@bot.message_handler(func=lambda message: isFirstMessage(message))
def firstMessageHandler(message):
    db.add_user(message.from_user.id)
    try:
        with open("greeting_text.txt", 'r', encoding='utf-8') as text:
            greeting_message = text.read()
            bot.send_message(message.from_user.id, greeting_message)
    except UnicodeDecodeError:
        try:
            with open("greeting_text.txt", 'r', encoding='windows-1251') as text:
                greeting_message = text.read()
                bot.send_message(message.from_user.id, greeting_message)
        except:
            bot.send_message(message.from_user.id, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ task_lab!")

    showMainMenu(message)


@bot.message_handler(commands=['main_menu'])
def showMainMenu(message):
    available_labs = db.get_available_labs(str(message.from_user.id))
    #db.user_select_lab(str(message.from_user.id), None)
    if available_labs:
        lab_buttons = {}
        for lab_id in available_labs:

            prefix = "üëë " if db.is_user_admin_of_lab(str(message.from_user.id), lab_id) else "üî¨ "
            lab_buttons[f'{prefix}[id{lab_id}] {db.get_labname_by_id(lab_id)}'] = {"callback_data": f"lab_menu?{lab_id}"}

        markup = telebot.util.quick_markup(lab_buttons)

        bot.send_message(message.from_user.id, 
                       "–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–∞–º –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–π. –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â—É—é:",
                       reply_markup=markup)
    else:

        bot.send_message(message.from_user.id, 
                       "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —É –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–π. –ü–æ–ª—É—á–∏—Ç–µ —Å—Å—ã–ª–∫—É-–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏–ª–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞!")

@bot.callback_query_handler(func=lambda query: "lab_menu" in query.data
                            and int(query.data.split('?')[1]) in db.get_available_labs(str(query.from_user.id)))
def lab_menu(query):
    lab_id = query.data.split('?')[1]
    markup = telebot.util.quick_markup({
        "–°—Å—ã–ª–∫–∞ - –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ": {"callback_data":f"link_to?{lab_id}"},
        "–°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É": {"callback_data": "create_task"}
    })
    #db.user_select_lab(str(query.from_user.id), lab_id)
    bot.send_message(query.from_user.id, f"–í—ã –≤ –º–µ–Ω—é –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–∏ [id{lab_id}] <b>'{db.get_labname_by_id(lab_id)}'</b>. –ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?",
                     reply_markup=markup)
    bot.answer_callback_query(query.id)

@bot.callback_query_handler(func=lambda query: "link_to" in query.data
                            and int(query.data.split('?')[1]) in db.get_available_labs(str(query.from_user.id)))
def get_link_to_lab(query):
    lab_id = query.data.split('?')[1]
    bot.send_message(query.from_user.id, "–°—Å—ã–ª–∫–∞ –Ω–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ —Ç–µ–∫—É—â–µ–π –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–∏:\n"
                                         f"<code>t.me/task_lab_bot?start=lab_{lab_id}_{query.from_user.id}</code>\n"
                                         f"<i> (–Ω–∞–∂–º–∏—Ç–µ, —á—Ç–æ –±—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å) </i>")

@bot.callback_query_handler(func=lambda query: query.data == "create_task")
def create_task(query):
    bot.send_message(query.from_user.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ <b>–æ—Ç–≤–µ—Ç–æ–º</b> –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ñ–æ—Ä–º–∞—Ç–µ:\n–ù–∞–∑–≤–∞–Ω–∏–µ\n–û–ø–∏—Å–∞–Ω–∏–µ–û–ø–∏—Å–∞–Ω–∏–µ–û–ø–∏—Å–∞–Ω–∏–µ...")
    bot.answer_callback_query(query.id)

@bot.message_handler(func=lambda message: type(message.reply_to_message) != NoneType
                     and "–≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ" in message.reply_to_message.text
                     and 8076896158 == message.reply_to_message.from_user.id)
                     
def apply_task_name_and_description(message):
    def msg():
        bot.send_message(message.from_user.id,
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ <b>–æ—Ç–≤–µ—Ç–æ–º</b> –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ñ–æ—Ä–º–∞—Ç–µ:\n–ù–∞–∑–≤–∞–Ω–∏–µ\n–û–ø–∏—Å–∞–Ω–∏–µ–û–ø–∏—Å–∞–Ω–∏–µ–û–ø–∏—Å–∞–Ω–∏–µ...")
    lines = message.text.split("\n")

    title = lines[0]
    title_length = len(title)

    description = lines[1]
    description_length = len(description)

    if len(lines) < 2:
        bot.send_message(message.from_user.id, "–û—à–∏–±–∫–∞: –û—Ç—Å—É—Ç—Å–≤—É–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–ª–∏ –æ–ø–∏—Å–∞–Ω–∏–µ\n")
        msg()
    elif title_length > 100:
        bot.send_message(message.from_user.id, f"–û—à–∏–±–∫–∞! –Ω–∞–∑–≤–∞–Ω–∏–µ {title_length}/100 —Å–∏–º–≤..\n")
        msg()
    elif description_length > 1500:
        bot.send_message(message.from_user.id, f"–û—à–∏–±–∫–∞! –æ–ø–∏—Å–∞–Ω–∏–µ {description_length}/1500 —Å–∏–º–≤..\n")
        msg()
    else:
        markup = telebot.util.quick_markup({
        "–î–æ–±–∞–≤–∏—Ç—å —à–∞–≥–∏": {"callback_data":{"title": title, "description": description}},
        "–ó–∞–≤–µ—Ä—à–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ": {"callback_data": "create_task"}
        })
        bot.send_message(message.from_user.id, f"–ù–∞–∑–≤–∞–Ω–∏–µ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã, —Ç—É–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —à–∞–≥–∏", reply_markup=markup)
        

@bot.message_handler(commands=['start'], func=lambda message: True)
def process_invite(message):
    data = message.text[7:].split('_')
    print(data)
    if data[0] == 'lab':
        if int(data[1]) not in db.get_available_labs(data[2]):
            print(data[2])
            print(db.get_available_labs(data[2]))
            bot.send_message(message.from_user.id, "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Å—Å—ã–ª–∫–∞ –Ω–∞ –¥–æ—Å—Ç—É–ø –∫ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–∏ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞.")
        else:
            status = db.create_connection_user_to_lab(str(message.from_user.id), int(data[1]))

'''@bot.message_handler(func=lambda message: message.text and (message.text.startswith('üëë ') or message.text.startswith('üî¨ ')))
def select_lab(message):
    lab_name = message.text[2:]  

    available_labs = db.get_available_labs(str(message.from_user.id))
    selected_lab = None

    for lab_id, name, is_admin in available_labs:
        if name == lab_name:
            selected_lab = (lab_id, name, is_admin)
            break

    if not selected_lab:
        bot.send_message(message.from_user.id, "–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        showMainMenu(message)
        return

    lab_id, lab_name, is_admin = selected_lab

    markup = types.InlineKeyboardMarkup(row_width=2)

    btn_equipment = types.InlineKeyboardButton("üîß –û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ", callback_data=f"lab_equip_{lab_id}")
    btn_tasks = types.InlineKeyboardButton("üìã –ó–∞–¥–∞—á–∏", callback_data=f"lab_tasks_{lab_id}")

    if is_admin:
        btn_members = types.InlineKeyboardButton("üë• –£—á–∞—Å—Ç–Ω–∏–∫–∏", callback_data=f"lab_members_{lab_id}")
        btn_delete = types.InlineKeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å", callback_data=f"lab_delete_{lab_id}")
        markup.add(btn_equipment, btn_tasks, btn_members, btn_delete)
    else:
        markup.add(btn_equipment, btn_tasks)

    bot.send_message(
        message.from_user.id,
        f"<b>–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—è: {lab_name}</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=markup,
        parse_mode="HTML"
    )'''

@bot.callback_query_handler(func=lambda query: query.data == "create_lab"
                            and db.user_is_admin(str(query.from_user.id)))
def create_lab(query):
    bot.send_message(query.from_user.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–∏ <b>–æ—Ç–≤–µ—Ç–æ–º</b> –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ <i>(–º–∞–∫—Å.–¥–ª–∏–Ω–∞ = 100—Å–∏–º–≤.)</i>:")
    bot.answer_callback_query(query.id)
@bot.message_handler(func=lambda message: type(message.reply_to_message) != NoneType
                     and "–≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–∏" in message.reply_to_message.text
                     and 8076896158 == message.reply_to_message.from_user.id
                     and db.user_is_admin(str(message.from_user.id)))
def apply_lab_name(message):
    if len(message.text) > 100:
        bot.send_message(message.from_user.id, f"–û—à–∏–±–∫–∞! {len(message.text)}/100 —Å–∏–º–≤..\n"
                    f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–∏ <b>–æ—Ç–≤–µ—Ç–æ–º</b> –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ:")
    else:
        status = db.create_lab(telebot.util.escape(message.text), str(message.from_user.id))
        bot.send_message(message.from_user.id, f"–°—Ç–∞—Ç—É—Å –æ–ø–µ—Ä–∞—Ü–∏–∏: <b>{"–£—Å–ø–µ—à–Ω–æ!" if status != 'error' else "–û—à–∏–±–∫–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É —Å–∏—Å—Ç–µ–º—ã –∏–ª–∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É —Å–Ω–æ–≤–∞.."}</b>")

@bot.message_handler(func=lambda message: db.user_is_admin(message.from_user.id) and 'admin' == message.text)
def admin_menu(message):
    lab_id = db.user_get_selected_lab_id(str(message.from_user.id))
    print(lab_id)
    markup = telebot.util.quick_markup({
        "–°–æ–∑–¥–∞—Ç—å –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—é": {"callback_data": f"create_lab"},
        "–î–æ–±–∞–≤–∏—Ç—å –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ": {"callback_data": f"add_equipment?{lab_id}"},
        "–ò–∑–º–µ–Ω–∏—Ç—å –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ": {"callback_data": f"edit_equipment?{lab_id}"},
        "–£–¥–∞–ª–∏—Ç—å –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ": {"callback_data": f"delete_equipment?{lab_id}"},
        "–°–ø–∏—Å–æ–∫ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è": {"callback_data": f"equipment_list?{lab_id}"}
    })
    bot.send_message(message.from_user.id, f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å, {message.from_user.full_name}!\n"
                                           f"–í—ã–±—Ä–∞–Ω–Ω–∞—è –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—è: {db.get_labname_by_id(lab_id)}\n"
                                           f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                     reply_markup=markup)

@bot.callback_query_handler(func=lambda query: "add_equipment" in query.data
                            and db.is_user_admin_of_lab(query.from_user.id,int(query.data.split('?')[1]))
                            and db.user_get_selected_lab_id(str(query.from_user.id)) is not None)
def add_equipment_to_lab(query):
    lab_id = int(query.data.split('?')[1])
    bot.send_message(query.from_user.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, <b>–æ—Ç–≤–µ—Ç–æ–º</b> –≤–≤–µ–¥–∏—Ç–µ —Å–ø–∏—Å–æ–∫ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ñ–æ—Ä–º–∞—Ç–µ: <i>–Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–ª-–≤–æ</i>, –ø—Ä–∏–º–µ—Ä:\n\n"
                                         f"–ù–∞–∑–≤–∞–Ω–∏–µ 12\n–ù–∞–∑–≤–∞–Ω–∏–µ_2 8\n–ù–∞–∑–≤–∞–Ω–∏–µ_3 1\n...{lab_id}")
    bot.answer_callback_query(query.id)

@bot.message_handler(func=lambda message: type(message.reply_to_message) != NoneType
                     and "–≤–≤–µ–¥–∏—Ç–µ —Å–ø–∏—Å–æ–∫ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è" in message.reply_to_message.text
                     and 8076896158 == message.reply_to_message.from_user.id
                     and db.user_is_admin(str(message.from_user.id))
                     and db.is_user_admin_of_lab(message.from_user.id ,int(message.reply_to_message.text[message.reply_to_message.text.rfind(".")+1:])))
def add_equipment_list(message):
    print(message.text.split('\n'))

db.user_set_admin("877702484", True)
db.init_db()
print('Bot initialized')
bot.infinity_polling()