from types import NoneType
import telebot, json
from telebot import types
import db
import os
from dotenv import load_dotenv

load_dotenv()

# –ö–ª–∞—Å—Å Task
class Task:
    def __init__(self, name: str, description: str):
        self.name = name
        self.description = description
        self.stages = []

token = os.environ.get('TELEGRAM_BOT_TOKEN')

if not token:
    print("Error: TELEGRAM_BOT_TOKEN not found in .env file")
    exit(1)

bot = telebot.TeleBot(token, parse_mode="HTML")

# –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –∑–∞–¥–∞—á –∏ —à–∞–≥–æ–≤
user_tasks = {}  # {user_id: Task}
user_steps = {}  # {user_id: [{"name": str, "equipment": str, "timing": list}, ...]}

def isFirstMessage(message):
    return not db.is_user_registered(str(message.from_user.id))

@bot.message_handler(func=lambda message: isFirstMessage(message))
def firstMessageHandler(message):
    db.add_user(message.from_user.id)
    try:
        with open("greeting_text.txt", 'r', encoding='utf-8') as text:
            greeting_message = text.read()
            bot.send_message(message.from_user.id, greeting_message)
    except UnicodeDecodeError:
        try:
            with open("greeting_text.txt", 'r', encoding='windows-1251') as text:
                greeting_message = text.read()
                bot.send_message(message.from_user.id, greeting_message)
        except:
            bot.send_message(message.from_user.id, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ task_lab!")
    showMainMenu(message)

@bot.message_handler(commands=['main_menu'])
def showMainMenu(message):
    available_labs = db.get_available_labs(str(message.from_user.id))
    db.user_select_lab(str(message.from_user.id), None)
    if available_labs:
        lab_buttons = {}
        for lab_id in available_labs:
            prefix = "üëë " if db.is_user_admin_of_lab(str(message.from_user.id), lab_id) else "üî¨ "
            lab_buttons[f'{prefix}[id{lab_id}] {db.get_labname_by_id(lab_id)}'] = {"callback_data": f"lab_menu?{lab_id}"}
        markup = telebot.util.quick_markup(lab_buttons)
        bot.send_message(message.from_user.id, "–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–∞–º –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–π. –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â—É—é:", reply_markup=markup)
    else:
        bot.send_message(message.from_user.id, "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —É –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–π.")

@bot.callback_query_handler(func=lambda query: "lab_menu" in query.data
                            and int(query.data.split('?')[1]) in db.get_available_labs(str(query.from_user.id)))
def lab_menu(query):
    lab_id = query.data.split('?')[1]
    markup = telebot.util.quick_markup({
        "–°—Å—ã–ª–∫–∞ - –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ": {"callback_data": f"link_to?{lab_id}"},
        "–°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É": {"callback_data": "create_task"}
    })
    db.user_select_lab(str(query.from_user.id), int(lab_id))
    bot.send_message(query.from_user.id, f"–í—ã –≤ –º–µ–Ω—é –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–∏ [id{lab_id}] <b>'{db.get_labname_by_id(lab_id)}'</b>. –ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?",
                     reply_markup=markup)
    bot.answer_callback_query(query.id)

@bot.callback_query_handler(func=lambda query: "link_to" in query.data
                            and int(query.data.split('?')[1]) in db.get_available_labs(str(query.from_user.id)))
def get_link_to_lab(query):
    lab_id = query.data.split('?')[1]
    bot.send_message(query.from_user.id, "–°—Å—ã–ª–∫–∞ –Ω–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ —Ç–µ–∫—É—â–µ–π –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–∏:\n"
                                         f"<code>t.me/task_lab_bot?start=lab_{lab_id}_{query.from_user.id}</code>\n"
                                         f"<i> (–Ω–∞–∂–º–∏—Ç–µ, —á—Ç–æ–±—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å) </i>")

@bot.callback_query_handler(func=lambda query: query.data == "create_task")
def create_task(query):
    user_id = str(query.from_user.id)
    user_tasks[user_id] = None  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–∞–¥–∞—á—É –∫–∞–∫ None
    bot.send_message(query.from_user.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ <b>–æ—Ç–≤–µ—Ç–æ–º</b> –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ñ–æ—Ä–º–∞—Ç–µ:\n–ù–∞–∑–≤–∞–Ω–∏–µ...\n–û–ø–∏—Å–∞–Ω–∏–µ...")
    bot.answer_callback_query(query.id)

@bot.message_handler(func=lambda message: type(message.reply_to_message) != NoneType
                     and "–≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ" in message.reply_to_message.text
                     and 8076896158 == message.reply_to_message.from_user.id)
def apply_task_name_and_description(message):
    def msg():
        bot.send_message(message.from_user.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ <b>–æ—Ç–≤–µ—Ç–æ–º</b> –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ñ–æ—Ä–º–∞—Ç–µ:\n–ù–∞–∑–≤–∞–Ω–∏–µ...\n–û–ø–∏—Å–∞–Ω–∏–µ...")
    
    user_id = str(message.from_user.id)
    lines = message.text.split("\n")

    if len(lines) < 2:
        bot.send_message(message.from_user.id, "–û—à–∏–±–∫–∞: –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–ª–∏ –æ–ø–∏—Å–∞–Ω–∏–µ\n")
        msg()
        return

    title = lines[0]
    title_length = len(title)
    description = lines[1]
    description_length = len(description)

    if title_length > 100:
        bot.send_message(message.from_user.id, f"–û—à–∏–±–∫–∞! –ù–∞–∑–≤–∞–Ω–∏–µ {title_length}/100 —Å–∏–º–≤..\n")
        msg()
        return
    elif description_length > 1500:
        bot.send_message(message.from_user.id, f"–û—à–∏–±–∫–∞! –û–ø–∏—Å–∞–Ω–∏–µ {description_length}/1500 —Å–∏–º–≤..\n")
        msg()
        return
    
    # –°–æ–∑–¥–∞—ë–º –æ–±—ä–µ–∫—Ç Task –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ
    user_tasks[user_id] = Task(title, description)
    markup = telebot.util.quick_markup({"–î–æ–±–∞–≤–∏—Ç—å —à–∞–≥–∏": {"callback_data": "—Ö–∑"}})
    bot.send_message(message.from_user.id, f"–ù–∞–∑–≤–∞–Ω–∏–µ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –∑–∞–¥–∞—á—É '{title}'. –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —à–∞–≥–∏.", reply_markup=markup)

@bot.callback_query_handler(func=lambda query: query.data == "—Ö–∑")
def add_step(query):
    user_id = str(query.from_user.id)
    if user_id not in user_steps:
        user_steps[user_id] = []
    
    bot.send_message(query.from_user.id, 
                     "–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —à–∞–≥–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
                     "–ù–∞–∑–≤–∞–Ω–∏–µ\n"
                     "–ù–∞–∑–≤–∞–Ω–∏–µ_–ø—Ä–∏–±–æ—Ä–∞\n"
                     "–ê–∫—Ç–∏–≤–Ω–æ–µ –≤—Ä–µ–º—è: X\n"
                     "–í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è: Y\n"
                     "–í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: Z\n\n"
                     "–ü—Ä–∏–º–µ—Ä:\n"
                     "–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –æ–±—Ä–∞–∑—Ü–∞\n"
                     "–ú–∏–∫—Ä–æ—Å–∫–æ–ø\n"
                     "–ê–∫—Ç–∏–≤–Ω–æ–µ –≤—Ä–µ–º—è: 5\n"
                     "–í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è: 15\n"
                     "–í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: 7")
    bot.answer_callback_query(query.id)

@bot.message_handler(func=lambda message: type(message.reply_to_message) != NoneType
                     and "–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —à–∞–≥–∞" in message.reply_to_message.text
                     and 8076896158 == message.reply_to_message.from_user.id)
def apply_step_data(message):
    user_id = str(message.from_user.id)
    lines = message.text.split("\n")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–≤–µ–¥–µ–Ω–æ 5 —Å—Ç—Ä–æ–∫
    if len(lines) != 5:
        bot.send_message(message.from_user.id, "–û—à–∏–±–∫–∞: –ù—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ 5 —Å—Ç—Ä–æ–∫ (–ù–∞–∑–≤–∞–Ω–∏–µ, –ü—Ä–∏–±–æ—Ä, –ê–∫—Ç–∏–≤–Ω–æ–µ –≤—Ä–µ–º—è, –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è, –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏).")
        add_step_helper(user_id)
        return
    
    name, equipment, active_time_str, passive_time_str, processing_time_str = lines

    if len(name) > 100:
        bot.send_message(message.from_user.id, f"–û—à–∏–±–∫–∞: –ù–∞–∑–≤–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ ({len(name)}/100 —Å–∏–º–≤–æ–ª–æ–≤).")
        add_step_helper(user_id)
        return
    
    # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
    if not active_time_str.startswith("–ê–∫—Ç–∏–≤–Ω–æ–µ –≤—Ä–µ–º—è: "):
        bot.send_message(message.from_user.id, "–û—à–∏–±–∫–∞: –°—Ç—Ä–æ–∫–∞ –¥–æ–ª–∂–Ω–∞ –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å '–ê–∫—Ç–∏–≤–Ω–æ–µ –≤—Ä–µ–º—è: '.")
        add_step_helper(user_id)
        return
    try:
        active_time = int(active_time_str.replace("–ê–∫—Ç–∏–≤–Ω–æ–µ –≤—Ä–µ–º—è: ", "").strip())
        if active_time < 0:
            raise ValueError
    except ValueError:
        bot.send_message(message.from_user.id, "–û—à–∏–±–∫–∞: –ê–∫—Ç–∏–≤–Ω–æ–µ –≤—Ä–µ–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.")
        add_step_helper(user_id)
        return

    # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –æ–∂–∏–¥–∞–Ω–∏—è
    if not passive_time_str.startswith("–í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è: "):
        bot.send_message(message.from_user.id, "–û—à–∏–±–∫–∞: –°—Ç—Ä–æ–∫–∞ –¥–æ–ª–∂–Ω–∞ –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å '–í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è: '.")
        add_step_helper(user_id)
        return
    try:
        passive_time = int(passive_time_str.replace("–í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è: ", "").strip())
        if passive_time < 0:
            raise ValueError
    except ValueError:
        bot.send_message(message.from_user.id, "–û—à–∏–±–∫–∞: –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.")
        add_step_helper(user_id)
        return

    # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏
    if not processing_time_str.startswith("–í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: "):
        bot.send_message(message.from_user.id, "–û—à–∏–±–∫–∞: –°—Ç—Ä–æ–∫–∞ –¥–æ–ª–∂–Ω–∞ –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å '–í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: '.")
        add_step_helper(user_id)
        return
    try:
        processing_time = int(processing_time_str.replace("–í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: ", "").strip())
        if processing_time < 0:
            raise ValueError
    except ValueError:
        bot.send_message(message.from_user.id, "–û—à–∏–±–∫–∞: –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.")
        add_step_helper(user_id)
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ timing –≤ —Ñ–æ—Ä–º–∞—Ç–µ [Xa, Yp, Za]
    timing = [f"{active_time}a", f"{passive_time}p", f"{processing_time}a"]
    step = {"name": name, "equipment": equipment, "timing": timing}
    user_steps[user_id].append(step)
    
    markup = telebot.util.quick_markup({
        "–î–æ–±–∞–≤–∏—Ç—å –µ—â—ë —à–∞–≥": {"callback_data": "add_another_step"},
        "–ó–∞–≤–µ—Ä—à–∏—Ç—å": {"callback_data": "finish_steps"}
    })
    bot.send_message(message.from_user.id, f"–®–∞–≥ '{name}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω. –ß—Ç–æ –¥–∞–ª—å—à–µ?", reply_markup=markup)

    print(user_steps)

def add_step_helper(user_id):
    bot.send_message(user_id, 
                     "–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —à–∞–≥–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
                     "–ù–∞–∑–≤–∞–Ω–∏–µ\n"
                     "–ù–∞–∑–≤–∞–Ω–∏–µ_–ø—Ä–∏–±–æ—Ä–∞\n"
                     "–ê–∫—Ç–∏–≤–Ω–æ–µ –≤—Ä–µ–º—è: X\n"
                     "–í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è: Y\n"
                     "–í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: Z")

@bot.callback_query_handler(func=lambda query: query.data == "add_another_step")
def add_another_step(query):
    add_step(query)

@bot.callback_query_handler(func=lambda query: query.data == "finish_steps")
def finish_steps(query):
    user_id = str(query.from_user.id)
    if not user_steps.get(user_id):
        bot.send_message(user_id, "–í—ã –Ω–µ –¥–æ–±–∞–≤–∏–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ —à–∞–≥–∞.")
        return
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —à–∞–≥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å –Ω–æ–º–µ—Ä–∞–º–∏
    steps_list = "\n".join(f"{i+1}. {step['name']} (–ü—Ä–∏–±–æ—Ä: {step['equipment']}, –í—Ä–µ–º—è: {step['timing']})" 
                           for i, step in enumerate(user_steps[user_id]))
    bot.send_message(user_id, f"–í–∞—à–∏ —à–∞–≥–∏:\n{steps_list}\n\n"
                              "–¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –ø–æ—Ä—è–¥–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
                              "–í –æ–¥–Ω–æ–π —Å—Ç—Ä–æ—á–∫–µ –ø–∏—à–µ—Ç—Å—è —Ç–µ —à–∞–≥–∏, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ\n"
                              "–î–µ–π—Å—Ç–≤–∏—è —Å —Ä–∞–∑–Ω—ã—Ö —Å—Ç—Ä–æ—á–µ–∫ –º–æ–∂–Ω–æ –≤—ã–ø–æ–ª–Ω—è—Ç—å –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ\n"
                              "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö —Å—Ç—Ä–æ—á–µ–∫ –Ω–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–æ\n"
                              "–®–∞–≥–∏ (—á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª): 1 2 3\n"
                              "–®–∞–≥–∏ (—á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª): 4 5")
    bot.answer_callback_query(query.id)

@bot.message_handler(func=lambda message: type(message.reply_to_message) != NoneType
                     and "–¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –ø–æ—Ä—è–¥–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è" in message.reply_to_message.text
                     and 8076896158 == message.reply_to_message.from_user.id)
def apply_step_order(message):
    user_id = str(message.from_user.id)
    lines = message.text.split("\n")
    
    if not lines:
        bot.send_message(user_id, "–û—à–∏–±–∫–∞: –£–∫–∞–∂–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –≤–µ—Ç–∫—É —à–∞–≥–æ–≤.")
        return
    
    branches = []
    all_indices = set()
    
    try:
        for line in lines:
            if not line.strip():
                continue
            branch = [int(x) - 1 for x in line.split()]
            branches.append(branch)
            all_indices.update(branch)
    except ValueError:
        bot.send_message(user_id, "–û—à–∏–±–∫–∞: –£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä–∞ —à–∞–≥–æ–≤ —á–∏—Å–ª–∞–º–∏ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª –≤ –∫–∞–∂–¥–æ–π —Å—Ç—Ä–æ–∫–µ.")
        return

    total_steps = len(user_steps[user_id])
    
    if len(all_indices) != total_steps or max(all_indices, default=-1) >= total_steps or min(all_indices, default=0) < 0:
        bot.send_message(user_id, "–û—à–∏–±–∫–∞: –£–∫–∞–∑–∞–Ω—ã –Ω–µ–≤–µ—Ä–Ω—ã–µ, –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ –∏–ª–∏ –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è –Ω–æ–º–µ—Ä–∞ —à–∞–≥–æ–≤.")
        return

    task = user_tasks[user_id]
    task.stages = [[user_steps[user_id][i] for i in branch] for branch in branches]

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–¥–∞—á—É –≤ –ë–î 
    
    template_id = db.add_template(task.name, task.description, task.stages)
    db.assing_task_to_user(templates_id=template_id, user_id=user_id)


    print(user_tasks[user_id].stages)

    del user_steps[user_id]
    del user_tasks[user_id]

    confirmation = f"–ó–∞–¥–∞—á–∞ '{task.name}' —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ —Å–æ —Å—Ç–∞–¥–∏—è–º–∏:\n"
    for i, branch in enumerate(branches, 1):
        branch_str = " ".join(str(idx + 1) for idx in branch)
        confirmation += f"–í–µ—Ç–∫–∞ {i}: {branch_str}\n"
    
    bot.send_message(user_id, confirmation)
    showMainMenu(message)

@bot.message_handler(commands=['start'], func=lambda message: True)
def process_invite(message):
    data = message.text[7:].split('_')
    print(data)
    if data[0] == 'lab':
        if int(data[1]) not in db.get_available_labs(data[2]):
            print(data[2])
            print(db.get_available_labs(data[2]))
            bot.send_message(message.from_user.id, "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Å—Å—ã–ª–∫–∞ –Ω–∞ –¥–æ—Å—Ç—É–ø –∫ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–∏ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞.")
        else:
            status = db.create_connection_user_to_lab(str(message.from_user.id), int(data[1]))



'''@bot.message_handler(func=lambda message: message.text and (message.text.startswith('üëë ') or message.text.startswith('üî¨ ')))
def select_lab(message):
    lab_name = message.text[2:]  

    available_labs = db.get_available_labs(str(message.from_user.id))
    selected_lab = None

    for lab_id, name, is_admin in available_labs:
        if name == lab_name:
            selected_lab = (lab_id, name, is_admin)
            break

    if not selected_lab:
        bot.send_message(message.from_user.id, "–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        showMainMenu(message)
        return

    lab_id, lab_name, is_admin = selected_lab

    markup = types.InlineKeyboardMarkup(row_width=2)

    btn_equipment = types.InlineKeyboardButton("üîß –û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ", callback_data=f"lab_equip_{lab_id}")
    btn_tasks = types.InlineKeyboardButton("üìã –ó–∞–¥–∞—á–∏", callback_data=f"lab_tasks_{lab_id}")

    if is_admin:
        btn_members = types.InlineKeyboardButton("üë• –£—á–∞—Å—Ç–Ω–∏–∫–∏", callback_data=f"lab_members_{lab_id}")
        btn_delete = types.InlineKeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å", callback_data=f"lab_delete_{lab_id}")
        markup.add(btn_equipment, btn_tasks, btn_members, btn_delete)
    else:
        markup.add(btn_equipment, btn_tasks)

    bot.send_message(
        message.from_user.id,
        f"<b>–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—è: {lab_name}</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=markup,
        parse_mode="HTML"
    )'''

@bot.callback_query_handler(func=lambda query: query.data == "create_lab"
                            and db.user_is_admin(str(query.from_user.id)))
def create_lab(query):
    bot.send_message(query.from_user.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–∏ <b>–æ—Ç–≤–µ—Ç–æ–º</b> –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ <i>(–º–∞–∫—Å.–¥–ª–∏–Ω–∞ = 100—Å–∏–º–≤.)</i>:")
    bot.answer_callback_query(query.id)
@bot.message_handler(func=lambda message: type(message.reply_to_message) != NoneType
                     and "–≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–∏" in message.reply_to_message.text
                     and 8076896158 == message.reply_to_message.from_user.id
                     and db.user_is_admin(str(message.from_user.id)))
def apply_lab_name(message):
    if len(message.text) > 100:
        bot.send_message(message.from_user.id, f"–û—à–∏–±–∫–∞! {len(message.text)}/100 —Å–∏–º–≤..\n"
                    f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–∏ <b>–æ—Ç–≤–µ—Ç–æ–º</b> –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ:")
    else:
        status = db.create_lab(telebot.util.escape(message.text), str(message.from_user.id))
        bot.send_message(message.from_user.id, f"–°—Ç–∞—Ç—É—Å –æ–ø–µ—Ä–∞—Ü–∏–∏: <b>{"–£—Å–ø–µ—à–Ω–æ!" if status != 'error' else "–û—à–∏–±–∫–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É —Å–∏—Å—Ç–µ–º—ã –∏–ª–∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É —Å–Ω–æ–≤–∞.."}</b>")

@bot.message_handler(func=lambda message: db.user_is_admin(message.from_user.id) and 'admin' == message.text)
def admin_menu(message):
    lab_id = db.user_get_selected_lab_id(str(message.from_user.id))
    print(lab_id)
    markup = telebot.util.quick_markup({
        "–°–æ–∑–¥–∞—Ç—å –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—é": {"callback_data": f"create_lab"},
        "–î–æ–±–∞–≤–∏—Ç—å –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ": {"callback_data": f"add_equipment?{lab_id}"},
        "–ò–∑–º–µ–Ω–∏—Ç—å –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ": {"callback_data": f"edit_equipment?{lab_id}"},
        "–£–¥–∞–ª–∏—Ç—å –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ": {"callback_data": f"delete_equipment?{lab_id}"},
        "–°–ø–∏—Å–æ–∫ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è": {"callback_data": f"equipment_list?{lab_id}"}
    })
    bot.send_message(message.from_user.id, f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å, {message.from_user.full_name}!\n"
                                           f"–í—ã–±—Ä–∞–Ω–Ω–∞—è –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—è: [id{lab_id}] <b>'{db.get_labname_by_id(lab_id)}'</b>\n"
                                           f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                     reply_markup=markup)

@bot.callback_query_handler(func=lambda query: "add_equipment" in query.data)
def add_equipment_to_lab(query):
    print(db.user_get_selected_lab_id(str(query.from_user.id)))
    print(db.is_user_admin_of_lab(query.from_user.id,int(query.data.split('?')[1])))
    lab_id = int(query.data.split('?')[1])
    bot.send_message(query.from_user.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, <b>–æ—Ç–≤–µ—Ç–æ–º</b> –≤–≤–µ–¥–∏—Ç–µ —Å–ø–∏—Å–æ–∫ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ñ–æ—Ä–º–∞—Ç–µ: [<i>–Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–ª-–≤–æ</i>], –ø—Ä–∏–º–µ—Ä:\n\n"
                                         f"–ù–∞–∑–≤–∞–Ω–∏–µ 12\n–ù–∞–∑–≤–∞–Ω–∏–µ_2 8\n–ù–∞–∑–≤–∞–Ω–∏–µ_3 1\n...{lab_id}")
    bot.answer_callback_query(query.id)

@bot.message_handler(func=lambda message: type(message.reply_to_message) != NoneType
                     and "–≤–≤–µ–¥–∏—Ç–µ —Å–ø–∏—Å–æ–∫ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è" in message.reply_to_message.text
                     and 8076896158 == message.reply_to_message.from_user.id
                     and db.user_is_admin(str(message.from_user.id))
                     and db.is_user_admin_of_lab(str(message.from_user.id) ,int(message.reply_to_message.text[message.reply_to_message.text.rfind(".")+1:])))
def add_equipment_list(message):
    lab_id = int(message.reply_to_message.text[message.reply_to_message.text.rfind(".")+1:])
    lines = message.text.split('\n')
    errors = []
    for line in lines:
        if len(line.split(' ')) != 2:
            errors.append(line)
            continue

        try:
            count = int(line.split(' ')[1])
        except:
            errors.append(line)
            continue

        for i in range(count):
            status = db.add_equipment(telebot.util.escape(line.split(' ')[0]), True, lab_id)
            if status == 'error':
                errors.append(line)
                continue

    bot.send_message(message.from_user.id, f"–û–ø–µ—Ä–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞. –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—à–∏–±–æ–∫ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏: <b>{len(errors)}</b>:\n"
                                           f"{'\n'.join(errors)}\n")

'''@bot.message_handler(func=lambda message: message.text and (message.text.startswith('üëë ') or message.text.startswith('üî¨ ')))
def select_lab(message):
    lab_name = message.text[2:]  

    available_labs = db.get_available_labs(str(message.from_user.id))
    selected_lab = None

    for lab_id, name, is_admin in available_labs:
        if name == lab_name:
            selected_lab = (lab_id, name, is_admin)
            break

    if not selected_lab:
        bot.send_message(message.from_user.id, "–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        showMainMenu(message)
        return

    lab_id, lab_name, is_admin = selected_lab

    markup = types.InlineKeyboardMarkup(row_width=2)

    btn_equipment = types.InlineKeyboardButton("üîß –û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ", callback_data=f"lab_equip_{lab_id}")
    btn_tasks = types.InlineKeyboardButton("üìã –ó–∞–¥–∞—á–∏", callback_data=f"lab_tasks_{lab_id}")

    if is_admin:
        btn_members = types.InlineKeyboardButton("üë• –£—á–∞—Å—Ç–Ω–∏–∫–∏", callback_data=f"lab_members_{lab_id}")
        btn_delete = types.InlineKeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å", callback_data=f"lab_delete_{lab_id}")
        markup.add(btn_equipment, btn_tasks, btn_members, btn_delete)
    else:
        markup.add(btn_equipment, btn_tasks)

    bot.send_message(
        message.from_user.id,
        f"<b>–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—è: {lab_name}</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=markup,
        parse_mode="HTML"
    )'''

@bot.callback_query_handler(func=lambda query: query.data == "create_lab"
                            and db.user_is_admin(str(query.from_user.id)))
def create_lab(query):
    bot.send_message(query.from_user.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–∏ <b>–æ—Ç–≤–µ—Ç–æ–º</b> –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ <i>(–º–∞–∫—Å.–¥–ª–∏–Ω–∞ = 100—Å–∏–º–≤.)</i>:")
    bot.answer_callback_query(query.id)
@bot.message_handler(func=lambda message: type(message.reply_to_message) != NoneType
                     and "–≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–∏" in message.reply_to_message.text
                     and 8076896158 == message.reply_to_message.from_user.id
                     and db.user_is_admin(str(message.from_user.id)))
def apply_lab_name(message):
    if len(message.text) > 100:
        bot.send_message(message.from_user.id, f"–û—à–∏–±–∫–∞! {len(message.text)}/100 —Å–∏–º–≤..\n"
                    f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–∏ <b>–æ—Ç–≤–µ—Ç–æ–º</b> –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ:")
    else:
        status = db.create_lab(telebot.util.escape(message.text), str(message.from_user.id))
        bot.send_message(message.from_user.id, f"–°—Ç–∞—Ç—É—Å –æ–ø–µ—Ä–∞—Ü–∏–∏: <b>{"–£—Å–ø–µ—à–Ω–æ!" if status != 'error' else "–û—à–∏–±–∫–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É —Å–∏—Å—Ç–µ–º—ã –∏–ª–∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É —Å–Ω–æ–≤–∞.."}</b>")

@bot.message_handler(func=lambda message: db.user_is_admin(message.from_user.id) and 'admin' == message.text)
def admin_menu(message):
    lab_id = db.user_get_selected_lab_id(str(message.from_user.id))
    print(lab_id)
    markup = telebot.util.quick_markup({
        "–°–æ–∑–¥–∞—Ç—å –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—é": {"callback_data": f"create_lab"},
        "–î–æ–±–∞–≤–∏—Ç—å –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ": {"callback_data": f"add_equipment?{lab_id}"},
        "–ò–∑–º–µ–Ω–∏—Ç—å –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ": {"callback_data": f"edit_equipment?{lab_id}"},
        "–£–¥–∞–ª–∏—Ç—å –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ": {"callback_data": f"delete_equipment?{lab_id}"},
        "–°–ø–∏—Å–æ–∫ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è": {"callback_data": f"equipment_list?{lab_id}"}
    })
    bot.send_message(message.from_user.id, f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å, {message.from_user.full_name}!\n"
                                           f"–í—ã–±—Ä–∞–Ω–Ω–∞—è –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—è: [id{lab_id}] <b>'{db.get_labname_by_id(lab_id)}'</b>\n"
                                           f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                     reply_markup=markup)

@bot.callback_query_handler(func=lambda query: "add_equipment" in query.data)
def add_equipment_to_lab(query):
    print(db.user_get_selected_lab_id(str(query.from_user.id)))
    print(db.is_user_admin_of_lab(query.from_user.id,int(query.data.split('?')[1])))
    lab_id = int(query.data.split('?')[1])
    bot.send_message(query.from_user.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, <b>–æ—Ç–≤–µ—Ç–æ–º</b> –≤–≤–µ–¥–∏—Ç–µ —Å–ø–∏—Å–æ–∫ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ñ–æ—Ä–º–∞—Ç–µ: [<i>–Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–ª-–≤–æ</i>], –ø—Ä–∏–º–µ—Ä:\n\n"
                                         f"–ù–∞–∑–≤–∞–Ω–∏–µ 12\n–ù–∞–∑–≤–∞–Ω–∏–µ_2 8\n–ù–∞–∑–≤–∞–Ω–∏–µ_3 1\n...{lab_id}")
    bot.answer_callback_query(query.id)

@bot.message_handler(func=lambda message: type(message.reply_to_message) != NoneType
                     and "–≤–≤–µ–¥–∏—Ç–µ —Å–ø–∏—Å–æ–∫ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è" in message.reply_to_message.text
                     and 8076896158 == message.reply_to_message.from_user.id
                     and db.user_is_admin(str(message.from_user.id))
                     and db.is_user_admin_of_lab(str(message.from_user.id) ,int(message.reply_to_message.text[message.reply_to_message.text.rfind(".")+1:])))
def add_equipment_list(message):
    lab_id = int(message.reply_to_message.text[message.reply_to_message.text.rfind(".")+1:])
    lines = message.text.split('\n')
    errors = []
    for line in lines:
        if len(line.split(' ')) != 2:
            errors.append(line)
            continue

        try:
            count = int(line.split(' ')[1])
        except:
            errors.append(line)
            continue

        for i in range(count):
            status = db.add_equipment(telebot.util.escape(line.split(' ')[0]), True, lab_id)
            if status == 'error':
                errors.append(line)
                continue

    bot.send_message(message.from_user.id, f"–û–ø–µ—Ä–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞. –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—à–∏–±–æ–∫ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏: <b>{len(errors)}</b>:\n"
                                           f"{'\n'.join(errors)}\n")




db.user_set_admin("877702484", True)
db.init_db()
print('Bot initialized')
bot.infinity_polling()